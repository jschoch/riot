# load the realtime components
loadrt [KINS]KINEMATICS
loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS num_dio=[EMCMOT]NUM_DIO num_aio=[EMCMOT]NUM_AIO
loadrt rio

# if you need to test rio without hardware, set it to 1
setp rio.sys-simulation 0

loadrt pid num_chan=2
addf pid.0.do-pid-calcs servo-thread
addf pid.1.do-pid-calcs servo-thread

# add the rio and motion functions to threads
addf motion-command-handler servo-thread
addf motion-controller servo-thread
addf rio.readwrite servo-thread

loadusr -W hal_manualtoolchange


# user-enable-out
net user-enable-out <= iocontrol.0.user-enable-out
net user-enable-out => rio.sys-enable

# user-request-enable
net user-request-enable <= iocontrol.0.user-request-enable
net user-request-enable => rio.sys-enable-request

# iocontrol-0-emc-enable-in
net iocontrol-0-emc-enable-in <= rio.sys-status
net iocontrol-0-emc-enable-in => iocontrol.0.emc-enable-in

# tool-prep-number
net tool-prep-number <= iocontrol.0.tool-prep-number
net tool-prep-number => hal_manualtoolchange.number

# tool-change
net tool-change <= iocontrol.0.tool-change
net tool-change => hal_manualtoolchange.change

# tool-changed
net tool-changed <= hal_manualtoolchange.changed
net tool-changed => iocontrol.0.tool-changed

# tool-prepared
net tool-prepared <= iocontrol.0.tool-prepare
net tool-prepared => iocontrol.0.tool-prepared

# spindle-0-speed-in
net spindle-0-speed-in <= rio.quadencoderz0.rps
net spindle-0-speed-in => spindle.0.speed-in

# pyvcp-halui-mdi-command-00
net pyvcp-halui-mdi-command-00 => halui.mdi-command-00

# pyvcp-halui-mdi-command-01
net pyvcp-halui-mdi-command-01 => halui.mdi-command-01

# pyvcp-quadencoderz0-indexout
net pyvcp-quadencoderz0-indexout <= rio.quadencoderz0.indexout

# pyvcp-quadencoderz0-position
net pyvcp-quadencoderz0-position <= rio.quadencoderz0.position

# pyvcp-quadencoderz0-rpm
net pyvcp-quadencoderz0-rpm <= rio.quadencoderz0.rpm

# pyvcp-EXP_DIN_ES1_X-bit
net pyvcp-EXP_DIN_ES1_X-bit <= rio.EXP_DIN_ES1_X.bit

# pyvcp-EXP_DIN_ES1_Z-bit
net pyvcp-EXP_DIN_ES1_Z-bit <= rio.EXP_DIN_ES1_Z.bit

# pyvcp-EXP_DIN_PROBE1-bit
net pyvcp-EXP_DIN_PROBE1-bit <= rio.EXP_DIN_PROBE1.bit

# pyvcp-EXP_DIN_EXTRA1-bit
net pyvcp-EXP_DIN_EXTRA1-bit <= rio.EXP_DIN_EXTRA1.bit

# pyvcp-BOB_DIN3_P13-bit
net pyvcp-BOB_DIN3_P13-bit <= rio.BOB_DIN3_P13.bit

# pyvcp-BOB_DIN2_P12-bit
net pyvcp-BOB_DIN2_P12-bit <= rio.BOB_DIN2_P12.bit

# pyvcp-BOB_DIN1_P11-bit
net pyvcp-BOB_DIN1_P11-bit <= rio.BOB_DIN1_P11.bit

# pyvcp-BOB_DIN0_P10-bit
net pyvcp-BOB_DIN0_P10-bit <= rio.BOB_DIN0_P10.bit

# pyvcp-wled0-0_green
net pyvcp-wled0-0_green => rio.wled0.0_green

# pyvcp-wled0-0_blue
net pyvcp-wled0-0_blue => rio.wled0.0_blue

# pyvcp-wled0-0_red
net pyvcp-wled0-0_red => rio.wled0.0_red

# setp
setp rio.quadencoderz0.position-scale 1440.0

# Axis: Z

# joint.0: relative positioning using pid.0
setp pid.0.Pgain     [JOINT_0]P
setp pid.0.Igain     [JOINT_0]I
setp pid.0.Dgain     [JOINT_0]D
setp pid.0.bias      [JOINT_0]BIAS
setp pid.0.FF0       [JOINT_0]FF0
setp pid.0.FF1       [JOINT_0]FF1
setp pid.0.FF2       [JOINT_0]FF2
setp pid.0.deadband  [JOINT_0]DEADBAND
setp pid.0.maxoutput [JOINT_0]MAXOUTPUT
setp rio.JOINT1.velocity-scale [JOINT_0]SCALE_OUT
setp rio.JOINT1.position-scale [JOINT_0]SCALE_IN
net j0vel-cmd <= pid.0.output
net j0vel-cmd => rio.JOINT1.velocity
net j0pos-cmd <= joint.0.motor-pos-cmd
net j0pos-cmd => pid.0.command
net j0pos-fb  <= rio.JOINT1.position
net j0pos-fb  => joint.0.motor-pos-fb
net j0pos-fb  => pid.0.feedback
net j0enable  <= joint.0.amp-enable-out
net j0enable  => rio.JOINT1.enable
net j0enable  => pid.0.enable

# Axis: X

# joint.1: relative positioning using pid.1
setp pid.1.Pgain     [JOINT_1]P
setp pid.1.Igain     [JOINT_1]I
setp pid.1.Dgain     [JOINT_1]D
setp pid.1.bias      [JOINT_1]BIAS
setp pid.1.FF0       [JOINT_1]FF0
setp pid.1.FF1       [JOINT_1]FF1
setp pid.1.FF2       [JOINT_1]FF2
setp pid.1.deadband  [JOINT_1]DEADBAND
setp pid.1.maxoutput [JOINT_1]MAXOUTPUT
setp rio.JOINT0.velocity-scale [JOINT_1]SCALE_OUT
setp rio.JOINT0.position-scale [JOINT_1]SCALE_IN
net j1vel-cmd <= pid.1.output
net j1vel-cmd => rio.JOINT0.velocity
net j1pos-cmd <= joint.1.motor-pos-cmd
net j1pos-cmd => pid.1.command
net j1pos-fb  <= rio.JOINT0.position
net j1pos-fb  => joint.1.motor-pos-fb
net j1pos-fb  => pid.1.feedback
net j1enable  <= joint.1.amp-enable-out
net j1enable  => rio.JOINT0.enable
net j1enable  => pid.1.enable
