# load the realtime components
loadrt [KINS]KINEMATICS
loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS num_dio=[EMCMOT]NUM_DIO num_aio=[EMCMOT]NUM_AIO
loadrt rio

loadrt pid num_chan=2

#### try encoder vel via ddt
##  This doesn't seem any smother than the other way to calculate velocity
loadrt ddt count=1
loadrt mult2 count=1

addf ddt.0 servo-thread
addf mult2.0 servo-thread

# make a signale from the raw position pin
#  net <signal>  <source>  <destination> (optional) <destination2>
setp mult2.0.in1 360
net sig_ddt_prepos rio.spindle11.position
net sig_ddt_prepos mult2.0.in0
net sig_ddt_pos mult2.0.out ddt.0.in
#net sig_ddt_pos rio.spindle11.position ddt.0.in

# multiply it by 360 to get the scale correct (we want raw)
#net sig_ddt_pre mult2.0.in0 ddt.0.out

#  connect the ddt output
net sig_ddt_rps <= ddt.0.out

#net sig_ddt_unscaled_rps 

#### end ddt crap

addf pid.0.do-pid-calcs servo-thread
addf pid.1.do-pid-calcs servo-thread

# add the rio and motion functions to threads
addf motion-command-handler servo-thread
addf motion-controller servo-thread
addf rio.readwrite servo-thread

loadusr -W hal_manualtoolchange

net rios.spindle11.indexenable rio.spindle11.indexenable <=> spindle.0.index-enable
setp rio.spindle11.position-scale 360.0
#setp rio.spindle11.position-scale 1440

# user-enable-out
net user-enable-out <= iocontrol.0.user-enable-out
net user-enable-out => rio.sys-enable

# user-request-enable
net user-request-enable <= iocontrol.0.user-request-enable
net user-request-enable => rio.sys-enable-request

# iocontrol-0-emc-enable-in
net iocontrol-0-emc-enable-in <= rio.sys-status
net iocontrol-0-emc-enable-in => iocontrol.0.emc-enable-in

# tool-prep-number
net tool-prep-number <= iocontrol.0.tool-prep-number
net tool-prep-number => hal_manualtoolchange.number

# tool-change
net tool-change <= iocontrol.0.tool-change
net tool-change => hal_manualtoolchange.change

# tool-changed
net tool-changed <= hal_manualtoolchange.changed
net tool-changed => iocontrol.0.tool-changed

# tool-prepared
net tool-prepared <= iocontrol.0.tool-prepare
net tool-prepared => iocontrol.0.tool-prepared

# spindle-0-revs
#net spindle-0-revs <= rio.spindle11.position
#net spindle-0-revs => spindle.0.revs

# spindle-0-speed-in
net spindle-0-speed-in <= rio.spindle11.rps
net spindle-0-speed-in => spindle.0.speed-in

# exp_din_es1_x
net exp_din_es1_x <= rio.EXP_DIN_ES1_X.bit
#net exp_din_es1_x => exp_din_es1_x

# exp_din_es2_z
net exp_din_es2_z <= rio.EXP_DIN_ES1_Z.bit
#net exp_din_es2_z => exp_din_es2_z

# exp_din_probe1
net exp_din_probe1 <= rio.EXP_DIN_PROBE1.bit
#net exp_din_probe1 => exp_din_probe1

# exp_din_extra1
net exp_din_extra1 <= rio.EXP__DIN_EXTRA1.bit
#net exp_din_extra1 => exp_din_extra1

# bob_din3_p13
net bob_din3_p13 <= rio.BOB_DIN3_P13.bit
#net bob_din3_p13 => bob_din3_p13

# bob_din2_p12
net bob_din2_p12 <= rio.BOB_DIN2_P12.bit
#net bob_din2_p12 => bob_din2_p12

# bob_din1_p11
net bob_din1_p11 <= rio.BOB_DIN1_P11.bit
#net bob_din1_p11 => bob_din1_p11

# bob_din0_p10
net bob_din0_p10 <= rio.BOB_DIN0_P10.bit
#net bob_din0_p10 => bob_din0_p10

# pyvcp-halui-mdi-command-00
net pyvcp-halui-mdi-command-00 => halui.mdi-command-00

# pyvcp-halui-mdi-command-01
net pyvcp-halui-mdi-command-01 => halui.mdi-command-01

# pyvcp-spindle11-indexenable
#net pyvcp-spindle11-indexenable <= rio.spindle11.indexenable

# pyvcp-spindle11-indexout
net pyvcp-spindle11-indexout <= rio.spindle11.indexout

# pyvcp-spindle11-rpm
net pyvcp-spindle11-rpm <= rio.spindle11.rpm

# pyvcp-led_11-bit
net pyvcp-led_11-bit => rio.led_11.bit

# pyvcp-btn_2-bit
net pyvcp-btn_2-bit <= rio.btn_2.bit

# pyvcp-wled_bar15-value-f
net pyvcp-wled_bar15-value-f => rio.wled_bar15.value

# pyvcp-BITOUT_EXTRA1-bit
net pyvcp-BITOUT_EXTRA1-bit => rio.BITOUT_EXTRA1.bit

# Axis: X

# joint.0: relative positioning using pid.0
setp pid.0.Pgain     [JOINT_0]P
setp pid.0.Igain     [JOINT_0]I
setp pid.0.Dgain     [JOINT_0]D
setp pid.0.bias      [JOINT_0]BIAS
setp pid.0.FF0       [JOINT_0]FF0
setp pid.0.FF1       [JOINT_0]FF1
setp pid.0.FF2       [JOINT_0]FF2
setp pid.0.deadband  [JOINT_0]DEADBAND
setp pid.0.maxoutput [JOINT_0]MAXOUTPUT
setp rio.JOINT0.velocity-scale [JOINT_0]SCALE_OUT
setp rio.JOINT0.position-scale [JOINT_0]SCALE_IN
net j0vel-cmd <= pid.0.output
net j0vel-cmd => rio.JOINT0.velocity
net j0pos-cmd <= joint.0.motor-pos-cmd
net j0pos-cmd => pid.0.command
net j0pos-fb  <= rio.JOINT0.position
net j0pos-fb  => joint.0.motor-pos-fb
net j0pos-fb  => pid.0.feedback
net j0enable  <= joint.0.amp-enable-out
net j0enable  => rio.JOINT0.enable
net j0enable  => pid.0.enable

# Axis: Z

# joint.1: relative positioning using pid.1
setp pid.1.Pgain     [JOINT_1]P
setp pid.1.Igain     [JOINT_1]I
setp pid.1.Dgain     [JOINT_1]D
setp pid.1.bias      [JOINT_1]BIAS
setp pid.1.FF0       [JOINT_1]FF0
setp pid.1.FF1       [JOINT_1]FF1
setp pid.1.FF2       [JOINT_1]FF2
setp pid.1.deadband  [JOINT_1]DEADBAND
setp pid.1.maxoutput [JOINT_1]MAXOUTPUT
setp rio.JOINT1.velocity-scale [JOINT_1]SCALE_OUT
setp rio.JOINT1.position-scale [JOINT_1]SCALE_IN
net j1vel-cmd <= pid.1.output
net j1vel-cmd => rio.JOINT1.velocity
net j1pos-cmd <= joint.1.motor-pos-cmd
net j1pos-cmd => pid.1.command
net j1pos-fb  <= rio.JOINT1.position
net j1pos-fb  => joint.1.motor-pos-fb
net j1pos-fb  => pid.1.feedback
net j1enable  <= joint.1.amp-enable-out
net j1enable  => rio.JOINT1.enable
net j1enable  => pid.1.enable
